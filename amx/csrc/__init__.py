import subprocess
import os

def build_with_cmake(proj_name = None, dir_path = None):
    if dir_path is None:
        dir_path = os.path.dirname(os.path.realpath(__file__))
    if proj_name is None:
        proj_name = os.path.basename(dir_path)

    cmake_path = os.path.join(dir_path, "CMakeLists.txt")
    cmake_src = '''
# !!! auto-generated by build_with_cmake, do not modify !!!

cmake_minimum_required(VERSION 3.0)
project(cppmodule)

find_package(pybind11 REQUIRED)

FILE(GLOB CPP_SRCS ./*.cpp)

pybind11_add_module(cppmodule ${CPP_SRCS})

find_package(OpenMP)
if (OPENMP_FOUND)
    set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
    set (CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")
endif()

set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -march=core-avx2")

# EXAMPLE_VERSION_INFO is defined by setup.py and passed into the C++ code as a
# define (VERSION_INFO) here.

target_include_directories(cppmodule PRIVATE ../../include)

set_target_properties(cppmodule
    PROPERTIES
    ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/lib"
    LIBRARY_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/../"
    RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin"
)

target_compile_definitions(cppmodule
                           PRIVATE PACKAGE_NAME=cppmodule)
    '''
    with open(cmake_path, "w") as file:
        file.write(cmake_src)

    build_path = os.path.join(dir_path, "build")
    subprocess.check_output(["cmake", "-B", build_path , "-S", dir_path, "-DCMAKE_BUILD_TYPE=RelWithDebInfo"], shell=False)
    subprocess.check_output(["cmake", "--build", build_path, "--config", "RelWithDebInfo"], shell=False)

build_with_cmake()
from .cppmodule import *
